name: Sync GitHub Issues

on:
  # Schedule automatic runs
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      config_file:
        description: 'Configuration file path'
        required: false
        default: 'config/github_issues.yml'
      verbose:
        description: 'Enable verbose logging'
        required: false
        default: 'false'
        type: boolean
      dry_run:
        description: 'Perform dry run (no files created)'
        required: false
        default: 'false'
        type: boolean

jobs:
  sync-issues:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate configuration
      run: |
        if [ ! -f "${{ github.event.inputs.config_file || 'config/github_issues.yml' }}" ]; then
          echo "❌ Configuration file not found: ${{ github.event.inputs.config_file || 'config/github_issues.yml' }}"
          exit 1
        fi
        echo "✅ Configuration file found"
    
    - name: Run GitHub Issues Sync
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Build command arguments
        ARGS="--config ${{ github.event.inputs.config_file || 'config/github_issues.yml' }}"
        
        if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
          ARGS="$ARGS --verbose"
        fi
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          ARGS="$ARGS --dry-run"
        fi
        
        echo "Running: python fetch_github_issues.py $ARGS"
        python fetch_github_issues.py $ARGS
    
    - name: Check for changes
      id: git-check
      run: |
        git add .
        if git diff --staged --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected"
        fi
    
    - name: Create Pull Request
      if: steps.git-check.outputs.changes == 'true' && github.event.inputs.dry_run != 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          🤖 Update GitHub Issues documentation
          
          - Synced issues from GitHub API
          - Updated MkDocs navigation
          - Generated/updated issue markdown files
        title: '🤖 Automated GitHub Issues Sync'
        body: |
          ## 🤖 Automated GitHub Issues Sync
          
          This pull request was automatically generated to sync GitHub issues with the documentation.
          
          ### Changes Made
          - ✅ Fetched latest issues from all organization repositories
          - ✅ Generated/updated Markdown files for issues
          - ✅ Updated MkDocs navigation structure
          - ✅ Generated overview and index files
          
          ### Statistics
          The sync process has been completed. Check the commit details for specific changes.
          
          ### Review Instructions
          1. Review the generated/updated Markdown files
          2. Verify the MkDocs navigation structure
          3. Check that issue content is properly formatted
          4. Merge if everything looks good
          
          ---
          *This PR was created automatically by the GitHub Issues Sync workflow.*
        branch: automated/github-issues-sync
        delete-branch: true
        labels: |
          automated
          documentation
          github-issues
    
    - name: Auto-merge Pull Request (Optional)
      if: steps.git-check.outputs.changes == 'true' && github.event.inputs.dry_run != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Optional: Auto-merge the PR (uncomment if desired)
        # PR_NUMBER=$(gh pr list --head automated/github-issues-sync --json number --jq '.[0].number')
        # if [ "$PR_NUMBER" != "null" ] && [ -n "$PR_NUMBER" ]; then
        #   echo "Auto-merging PR #$PR_NUMBER"
        #   gh pr merge $PR_NUMBER --auto --merge
        # fi
        echo "Pull request created. Manual review required."
    
    - name: Summary
      if: always()
      run: |
        echo "## 📊 GitHub Issues Sync Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.git-check.outputs.changes }}" = "true" ]; then
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "✅ **Dry run completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "- Changes would be made (dry run mode)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Sync completed with changes**" >> $GITHUB_STEP_SUMMARY
            echo "- Pull request created for review" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "ℹ️ **No changes detected**" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation is up to date" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration Used" >> $GITHUB_STEP_SUMMARY
        echo "- Config file: \`${{ github.event.inputs.config_file || 'config/github_issues.yml' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Verbose mode: ${{ github.event.inputs.verbose || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dry run: ${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Notification on failure
      if: failure()
      run: |
        echo "## ❌ GitHub Issues Sync Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The GitHub Issues sync process encountered an error. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Troubleshooting Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Verify GitHub token permissions" >> $GITHUB_STEP_SUMMARY
        echo "2. Check configuration file syntax" >> $GITHUB_STEP_SUMMARY
        echo "3. Review network connectivity and rate limits" >> $GITHUB_STEP_SUMMARY
        echo "4. Check repository permissions and organization access" >> $GITHUB_STEP_SUMMARY